import asyncio
import os
import logging
import sqlite3
import random
import uvicorn
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    CommandHandler,
    ContextTypes
)
from telegram.error import TelegramError
from fastapi import FastAPI, Request, Response

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()
application = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ main()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    conn = None
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å '/app/bot.db' –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Render
        conn = sqlite3.connect('/app/bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                message_count INTEGER DEFAULT 0,
                rank TEXT DEFAULT '–°—Ç—Ä–∞–Ω–Ω–∏–∫ –≠—Ñ–∏—Ä–∞'
            )
        ''')
        conn.commit()
        logger.info("Database initialized successfully.")
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")
    finally:
        if conn:
            conn.close()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π ---
def get_rank(message_count):
    if message_count >= 2400:
        return "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π –ü–∞–Ω–≥—É"
    elif message_count >= 1200:
        return "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –°—Ç–∏—Ö–∏–π"
    elif message_count >= 600:
        return "–ê—Ä—Ö–æ–Ω—Ç –°–≤–µ—Ç–∞"
    elif message_count >= 300:
        return "–ú–∞—Å—Ç–µ—Ä –î–∞–æ"
    elif message_count >= 150:
        return "–ê–¥–µ–ø—Ç –ù–µ–±–µ—Å"
    else:
        return "–°—Ç—Ä–∞–Ω–Ω–∏–∫ –≠—Ñ–∏—Ä–∞"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ ---
async def handle_forwarded_post_in_discussion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received an update in discussion group for forwarded message: {update.update_id}")

    message = update.message
    if not message:
        logger.info("Update is not a message in discussion group (forwarded). Skipping.")
        return

    current_chat_id = str(message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored forwarded message from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        forwarded_from_channel_id = str(message.forward_from_chat.id)
        expected_channel_id = os.getenv("CHANNEL_ID")

        logger.info(f"Detected forwarded message from channel {forwarded_from_channel_id} in discussion group. Expected channel: {expected_channel_id}")

        if expected_channel_id and forwarded_from_channel_id == expected_channel_id:
            message_to_reply_id = message.message_id
            try:
                await context.bot.send_message(
                    chat_id=discussion_group_id,
                    text="–ñ–¥–µ–º Edem PW! üöÄ",
                    reply_to_message_id=message_to_reply_id
                )
                logger.info(f"Successfully commented on forwarded post {message_to_reply_id} in discussion group {discussion_group_id} from channel {forwarded_from_channel_id}")
            except Exception as e:
                logger.error(f"Failed to send message to discussion group {discussion_group_id}: {e}")
        else:
            logger.info(f"Ignored forwarded message from channel {forwarded_from_channel_id}, not the expected source channel.")
    else:
        logger.info("Message in discussion group is not a forwarded message from a channel. Skipping.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ ---
async def count_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.from_user:
        logger.info("Update is not a message or has no user in count_messages. Skipping.")
        return

    current_chat_id = str(message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored message for counting from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}. Message text: '{message.text[:50] if message.text else 'N/A'}'")
        return

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    message_type = "unknown"
    if message.text:
        message_type = "text"
    elif message.photo:
        message_type = "photo"
    elif message.sticker:
        message_type = "sticker"
    elif message.video:
        message_type = "video"
    elif message.document:
        message_type = "document"
    elif message.audio:
        message_type = "audio"
    elif message.voice:
        message_type = "voice"
    elif message.video_note:
        message_type = "video_note"
    elif message.new_chat_members:
        message_type = "new_chat_members"
    elif message.left_chat_member:
        message_type = "left_chat_member"
    elif message.pinned_message:
        message_type = "pinned_message"
    elif message.animation: # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥–∏—Ñ–æ–∫
        message_type = "animation"

    logger.info(f"Processing message for counting from user {user_id} ({username}), type: {message_type}, chat: {current_chat_id}")

    if message_type in ["new_chat_members", "left_chat_member", "pinned_message"]:
        logger.info(f"Skipping message count for service message type: {message_type}")
        return

    conn = None
    try:
        conn = sqlite3.connect('/app/bot.db', check_same_thread=False)
        c = conn.cursor()

        c.execute("SELECT message_count FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()

        if result:
            message_count = result[0] + 1
            new_rank = get_rank(message_count)
            c.execute(
                "UPDATE users SET message_count = ?, rank = ?, username = ? WHERE user_id = ?",
                (message_count, new_rank, username, user_id)
            )
        else:
            message_count = 1
            new_rank = get_rank(message_count)
            c.execute(
                "INSERT INTO users (user_id, username, message_count, rank) VALUES (?, ?, ?, ?)",
                (user_id, username, message_count, new_rank)
            )

        conn.commit()
        logger.info(f"Updated message count for user {user_id} ({username}): {message_count}, rank: {new_rank} in chat {current_chat_id}")
    except Exception as e:
        logger.error(f"Failed to update message count for user {user_id} in chat {current_chat_id}: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö ---
async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ handle_random_range,
    # —Ç.–∫. handle_random_range –∏—Å–ø–æ–ª—å–∑—É–µ—Ç user_data
    if context.user_data.get("awaiting_random_range", False):
        logger.info(f"Ignored private message from chat_id {current_chat_id}, awaiting random range.")
        return

    logger.info(f"Received private message from chat_id {current_chat_id}. Message: '{update.message.text[:50] if update.message.text else 'N/A'}'")

    try:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç PWDarksearh by PWISMYLIFE. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
        )
        logger.info(f"Sent welcome message to user in chat_id {current_chat_id}")
    except Exception as e:
        logger.error(f"Failed to send welcome message in chat_id {current_chat_id}: {e}")

# --- –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received /start command from user {update.effective_user.id}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç PWDarksearh by PWISMYLIFE. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, —Ä–∞–Ω–≥–∞–º–∏ –∏ –¥–∞–∂–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∏–≥—Ä–∞—Ç—å. "
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received /info command from user {update.effective_user.id}")
    await update.message.reply_text(
        "–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ PWISMYLIFE. "
        "–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç –ø–æ–¥—Å—á—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—ã–¥–∞—á—É —Ä–∞–Ω–≥–æ–≤, —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
    )

async def echo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if update.message.chat.type != "private":
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç!")
        return

    text_to_echo = " ".join(context.args)
    logger.info(f"Received /echo command with text: '{text_to_echo}' from user {update.effective_user.id}")
    await update.message.reply_text(text_to_echo)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /random ---
async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    if update.message.chat.type != "private":
        logger.info(f"Ignored /random command from chat_id {current_chat_id}, not a private chat")
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    try:
        await update.message.reply_text(
            "üé≤ –í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–∏—Å–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <start>-<end>, –Ω–∞–ø—Ä–∏–º–µ—Ä, '1-3'"
        )
        context.user_data["awaiting_random_range"] = True
        logger.info(f"Prompted user for random range in chat_id {current_chat_id}")
    except Exception as e:
        logger.error(f"Failed to send random range prompt in chat_id {current_chat_id}: {e}")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ ---
async def handle_random_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏ –º—ã –æ–∂–∏–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if update.message.chat.type != "private" or not context.user_data.get("awaiting_random_range", False):
        logger.info(f"Ignored message from chat_id {str(update.message.chat.id)}, not awaiting random range in private chat.")
        return

    range_text = update.message.text.strip()
    current_chat_id = str(update.message.chat.id)
    logger.info(f"Received range '{range_text}' from user in chat_id {current_chat_id}")

    try:
        if "-" not in range_text:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ <start>-<end>, –Ω–∞–ø—Ä–∏–º–µ—Ä, '1-3'"
            )
            logger.info(f"Invalid range format '{range_text}' from chat_id {current_chat_id}")
            return

        start_str, end_str = map(str.strip, range_text.split("-", 1))
        start = int(start_str)
        end = int(end_str)

        if start > end:
            await update.message.reply_text(
                "‚ùå –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–Ω—Ü—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '1-3'"
            )
            logger.info(f"Invalid range: start {start} > end {end} from chat_id {current_chat_id}")
            return

        random_number = random.randint(start, end)
        await update.message.reply_text(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}")
        logger.info(f"Generated random number {random_number} for range {start}-{end} in chat_id {current_chat_id}")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, '1-3'"
        )
        logger.info(f"Invalid number format in range '{range_text}' from chat_id {current_chat_id}")
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        logger.error(f"Failed to generate random number for range '{range_text}' in chat_id {current_chat_id}: {e}", exc_info=True)
    finally:
        context.user_data["awaiting_random_range"] = False

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–µ ---
async def site(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored /site command from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    try:
        await update.message.reply_text("–ù–∞—à –ª—é–±–∏–º—ã–π —Ñ–æ—Ä—É–º: https://pwismylife.com/")
        logger.info(f"Sent /site response in discussion group {discussion_group_id}")
    except Exception as e:
        logger.error(f"Failed to send /site response in discussion group {discussion_group_id}: {e}")

async def servers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored /servers command from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    try:
        await update.message.reply_text(
            "–°–µ—Ä–≤–µ—Ä–∞ –¥–æ—Å—Ç–æ–π–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            "Edem New Born: https://edem.pw/\n"
            "Asgard PW: https://asgard.pw/\n"
            "Revolution PW: https://revolutionpw.online/\n"
            "ComeBack PW: https://comeback.pw/"
        )
        logger.info(f"Sent /servers response in discussion group {discussion_group_id}")
    except Exception as e:
        logger.error(f"Failed to send /servers response in discussion group {discussion_group_id}: {e}")

async def partners(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored /partners command from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    try:
        await update.message.reply_text(
            "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ/–ö–∞–Ω–∞–ª—ã —Å–æ—Ä–∞—Ç–Ω–∏–∫–æ–≤:\n\n"
            "RuFree News: @RuFreeNews\n"
            "ChaoPersik Team: @chaopersikpw\n"
            "GastTV: @gasttv\n"
            "Ubermench PW: @ubermensch_pw"
        )
        logger.info(f"Sent /partners response in discussion group {discussion_group_id}")
    except Exception as e:
        logger.error(f"Failed to send /partners response in discussion group {discussion_group_id}: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_type = update.message.chat.type
    user_id = update.effective_user.id
    logger.info(f"Received /help command from user {user_id} in chat type {chat_type}")

    if chat_type == "private":
        await update.message.reply_text(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ:\n"
            "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
            "/info - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
            "/echo <—Ç–µ–∫—Å—Ç> - –ë–æ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç –≤–∞—à —Ç–µ–∫—Å—Ç\n"
            "/random - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    else: # –ì—Ä—É–ø–ø–∞
        discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")
        current_chat_id = str(update.message.chat.id)
        if not discussion_group_id or current_chat_id != discussion_group_id:
            logger.info(f"Ignored /help command in group {current_chat_id}, not the expected discussion group {discussion_group_id}")
            return

        await update.message.reply_text(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:\n"
            "/site - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à –ª—é–±–∏–º—ã–π —Ñ–æ—Ä—É–º\n"
            "/servers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
            "/partners - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/rank - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
        )
    logger.info(f"Sent /help response to user {user_id} in chat type {chat_type}")


async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored /ping command from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    try:
        await update.message.reply_text("–ë–æ—Ç –æ–Ω–ª–∞–π–Ω! üü¢")
        logger.info(f"Sent /ping response in discussion group {discussion_group_id}")
    except Exception as e:
        logger.error(f"Failed to send /ping response in discussion group {discussion_group_id}: {e}")

async def rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_chat_id = str(update.message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored /rank command from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    user_id = update.message.from_user.id
    username = update.message.from_user.username or update.message.from_user.first_name

    conn = None
    try:
        conn = sqlite3.connect('/app/bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT message_count, rank FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()

        if result:
            message_count, rank = result
            response = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\nüèÜ –†–∞–Ω–≥: {rank}"
        else:
            response = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 0\nüèÜ –†–∞–Ω–≥: –°—Ç—Ä–∞–Ω–Ω–∏–∫ –≠—Ñ–∏—Ä–∞"

        await update.message.reply_text(response)
        logger.info(f"Sent /rank response for user {user_id} in discussion group {discussion_group_id}")
    except Exception as e:
        logger.error(f"Failed to send /rank response in discussion group {discussion_group_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            conn.close()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI ---
@app.get("/")
async def health_check():
    logger.info("Received health check GET / request. Responding 200 OK.")
    return {"status": "ok", "message": "Bot is running"}

@app.post("/webhook")
async def webhook(request: Request):
    global application
    if application is None:
        logger.critical("Telegram Application is not initialized. Cannot process webhook.")
        return Response(status_code=500, content="Telegram Application not ready.")

    try:
        json_data = await request.json()
    except Exception as e:
        logger.error(f"Failed to parse incoming JSON: {e}")
        return Response(status_code=400, content="Bad Request: Invalid JSON")

    logger.info(f"Received webhook payload: {json_data.get('update_id', 'N/A')}")

    try:
        update = Update.de_json(data=json_data, bot=application.bot)
    except Exception as e:
        logger.error(f"Failed to parse webhook JSON into Update object: {e}", exc_info=True)
        return Response(status_code=400, content=f"Bad Request: Could not parse Update object: {e}")

    try:
        await application.process_update(update)
        logger.info(f"Webhook processed successfully for update_id: {json_data.get('update_id', 'N/A')}.")
        return Response(status_code=200)
    except Exception as e:
        logger.error(f"Error processing update {json_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        return Response(status_code=500, content=f"Internal Server Error: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    global application
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.critical("BOT_TOKEN environment variable is not set. Bot cannot start.")
        raise ValueError("BOT_TOKEN environment variable is not set")

    init_db()

    application = Application.builder().token(token).build()
    await application.initialize()

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
    render_hostname = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if not render_hostname:
        logger.critical("RENDER_EXTERNAL_HOSTNAME environment variable is not set. Cannot determine webhook URL.")
        raise ValueError("RENDER_EXTERNAL_HOSTNAME is not set. Webhook URL cannot be determined automatically.")

    webhook_url = f"https://{render_hostname}/webhook"
    logger.info(f"Attempting to set webhook to: {webhook_url}")

    try:
        current_webhook_info = await application.bot.get_webhook_info()
        if current_webhook_info.url != webhook_url:
            await application.bot.set_webhook(url=webhook_url)
            logger.info("Webhook set successfully!")
        else:
            logger.info("Webhook is already set to the correct URL. Skipping.")
    except TelegramError as e:
        logger.critical(f"Failed to set webhook: {e}", exc_info=True)
        raise

    # --- –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("echo", echo_command)) # Echo –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö
    application.add_handler(CommandHandler("random", random_command)) # Random —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö

    # –°–æ–æ–±—â–µ–Ω–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è random (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        handle_random_range
    ))

    # –û–±—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        handle_private_message
    ))

    # –ö–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø (–î–ò–°–ö–£–°–°–ò–û–ù–ù–ê–Ø –ì–†–£–ü–ü–ê)
    application.add_handler(CommandHandler("site", site))
    application.add_handler(CommandHandler("servers", servers))
    application.add_handler(CommandHandler("partners", partners))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(CommandHandler("rank", rank))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö, —Ç–∞–∫ –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö)
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    application.add_handler(MessageHandler(
        filters.FORWARDED & filters.ChatType.GROUPS,
        handle_forwarded_post_in_discussion
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã, –Ω–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND & ~filters.FORWARDED & filters.ChatType.GROUPS,
        count_messages
    ))

    port = int(os.getenv("PORT", 10000))
    logger.info(f"Starting Uvicorn server on host 0.0.0.0 and port {port}")
    config = uvicorn.Config(app, host="0.0.0.0", port=port)
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"Bot failed to start: {e}", exc_info=True)
