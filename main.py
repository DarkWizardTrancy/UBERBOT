import asyncio
import os
import logging
import uvicorn
from telegram import Update
from telegram.ext import Application, MessageHandler, filters
from fastapi import FastAPI, Request, Response

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
# –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, –∏–º–µ–Ω–∏ –ª–æ–≥–≥–µ—Ä–∞, —É—Ä–æ–≤–Ω—è –∏ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__) # –ò—Å–ø–æ–ª—å–∑—É–µ–º __name__ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞, —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Application (–∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞).
# –≠—Ç–æ –Ω—É–∂–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ FastAPI –∏ bot-library —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–æ-—Ä–∞–∑–Ω–æ–º—É –∏ Application —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ main().
application = None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ ---
async def handle_post(update: Update, context):
    logger.info(f"Received an update with ID: {update.update_id}") # –õ–æ–≥: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç, –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    if update.channel_post and not update.channel_post.reply_to_message:
        channel_id = str(update.channel_post.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        expected_channel_id = os.getenv("CHANNEL_ID")

        logger.info(f"Detected channel post from chat ID: {channel_id}. Expected channel ID: {expected_channel_id}") # –õ–æ–≥: –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–º–µ–Ω–Ω–æ –∏–∑ —Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–º.
        if expected_channel_id and channel_id == expected_channel_id:
            message_id = update.channel_post.message_id
            # –ü–æ–ª—É—á–∞–µ–º ID –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
            discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

            logger.info(f"Post is from the expected channel ({channel_id}). Message ID: {message_id}. Discussion Group ID: {discussion_group_id}") # –õ–æ–≥: –ü–æ—Å—Ç –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞

            if discussion_group_id:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç.
                    await context.bot.send_message(
                        chat_id=discussion_group_id,
                        text="–ñ–¥–µ–º Edem PW! üöÄ",
                        reply_to_message_id=message_id
                    )
                    logger.info(f"Successfully commented on post {message_id} in discussion group {discussion_group_id} from channel {channel_id}") # –õ–æ–≥: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—É—é –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    logger.error(f"Failed to send message to discussion group {discussion_group_id}: {e}")
            else:
                logger.warning("No DISCUSSION_GROUP_ID environment variable set. Cannot send comment.") # –õ–æ–≥: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        else:
            logger.info(f"Ignored message from chat_id {channel_id} because it's not the expected channel.") # –õ–æ–≥: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    else:
        logger.info("Update is not a new channel post (either not a channel post or is a reply). Skipping.") # –õ–æ–≥: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ---
@app.post("/{token_suffix}")
async def webhook(token_suffix: str, request: Request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤ URL —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —á–∞—Å—Ç—å—é —Ç–æ–∫–µ–Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.
    # –≠—Ç–æ –±–∞–∑–æ–≤–∞—è –º–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ Telegram –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã.
    # split(":")[-1] –±–µ—Ä–µ—Ç —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è.
    expected_token_suffix = os.getenv("BOT_TOKEN", "").split(":")[-1]
    if not expected_token_suffix:
        logger.error("BOT_TOKEN environment variable is not set correctly. Cannot validate webhook.")
        return Response(status_code=500) # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 500

    if token_suffix != expected_token_suffix:
        logger.warning(f"Unauthorized webhook attempt with token suffix: {token_suffix}. Expected: {expected_token_suffix}")
        return Response(status_code=403) # 403 Forbidden, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    
    # –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞.
    json_data = await request.json()
    logger.info(f"Received webhook payload: {json_data.get('update_id', 'N/A')}") # –õ–æ–≥: –ü–æ–ª—É—á–µ–Ω payload –≤–µ–±—Ö—É–∫–∞

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç Update, –ø–æ–Ω—è—Ç–Ω—ã–π python-telegram-bot.
    # application.bot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É.
    try:
        update = Update.de_json(json_data, application.bot)
    except Exception as e:
        logger.error(f"Failed to parse webhook JSON into Update object: {e}")
        return Response(status_code=400) # 400 Bad Request, –µ—Å–ª–∏ JSON –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è Update

    # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Application –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
    await application.process_update(update)
    logger.info("Webhook processed successfully.") # –õ–æ–≥: –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    return Response(status_code=200) # 200 OK, —á—Ç–æ–±—ã Telegram –∑–Ω–∞–ª, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

# --- –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    global application # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é application

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.critical("BOT_TOKEN environment variable is not set. Bot cannot start.")
        raise ValueError("BOT_TOKEN environment variable is not set")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Application (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞).
    application = Application.builder().token(token).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Application.
    await application.initialize()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ.
    application.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, handle_post))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä —Å Uvicorn.
    # "0.0.0.0" –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—É —Å–ª—É—à–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.
    # –ü–æ—Ä—Ç –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8000.
    port = int(os.getenv("PORT", 8000))
    logger.info(f"Starting Uvicorn server on host 0.0.0.0 and port {port}")
    config = uvicorn.Config(app, host="0.0.0.0", port=port)
    server = uvicorn.Server(config)
    await server.serve()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É ---
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    asyncio.run(main())

