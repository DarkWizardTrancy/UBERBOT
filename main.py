import asyncio
import os
import logging
import sqlite3
import random
import uvicorn
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes
from telegram.error import TelegramError # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–µ–±—Ö—É–∫–∞
from fastapi import FastAPI, Request, Response

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()
application = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ main()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite ---
def init_db():
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å '/app/bot.db' –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Render
        conn = sqlite3.connect('/app/bot.db', check_same_thread=False)
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                message_count INTEGER DEFAULT 0,
                rank TEXT DEFAULT '–°—Ç—Ä–∞–Ω–Ω–∏–∫ –≠—Ñ–∏—Ä–∞'
            )
        ''')
        conn.commit()
        logger.info("Database initialized successfully.")
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")
    finally:
        if conn:
            conn.close()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π ---
def get_rank(message_count):
    if message_count >= 2400:
        return "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π –ü–∞–Ω–≥—É"
    elif message_count >= 1200:
        return "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –°—Ç–∏—Ö–∏–π"
    elif message_count >= 600:
        return "–ê—Ä—Ö–æ–Ω—Ç –°–≤–µ—Ç–∞"
    elif message_count >= 300:
        return "–ú–∞—Å—Ç–µ—Ä –î–∞–æ"
    elif message_count >= 150:
        return "–ê–¥–µ–ø—Ç –ù–µ–±–µ—Å"
    else:
        return "–°—Ç—Ä–∞–Ω–Ω–∏–∫ –≠—Ñ–∏—Ä–∞"

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ ---
async def handle_forwarded_post_in_discussion(update: Update, context):
    logger.info(f"Received an update in discussion group: {update.update_id}")

    message = update.message
    if not message:
        logger.info("Update is not a message in discussion group. Skipping.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    current_chat_id = str(message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored message from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        forwarded_from_channel_id = str(message.forward_from_chat.id)
        expected_channel_id = os.getenv("CHANNEL_ID")

        logger.info(f"Detected forwarded message from channel {forwarded_from_channel_id} in discussion group. Expected channel: {expected_channel_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –Ω–∞—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if expected_channel_id and forwarded_from_channel_id == expected_channel_id:
            message_to_reply_id = message.message_id

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –¥–∏—Å–∫—É—Å—Å–∏–æ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
                await context.bot.send_message(
                    chat_id=discussion_group_id,
                    text="–ñ–¥–µ–º Edem PW! üöÄ",
                    reply_to_message_id=message_to_reply_id
                )
                logger.info(f"Successfully commented on forwarded post {message_to_reply_id} in discussion group {discussion_group_id} from channel {forwarded_from_channel_id}")
            except Exception as e:
                logger.error(f"Failed to send message to discussion group {discussion_group_id}: {e}")
        else:
            logger.info(f"Ignored forwarded message from channel {forwarded_from_channel_id}, not the expected source channel.")
    else:
        logger.info("Message in discussion group is not a forwarded message from a channel. Skipping.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ ---
async def count_messages(update: Update, context):
    message = update.message
    if not message or not message.from_user:
        logger.info("Update is not a message or has no user. Skipping message count.")
        return

    current_chat_id = str(message.chat.id)
    discussion_group_id = os.getenv("DISCUSSION_GROUP_ID")

    if not discussion_group_id or current_chat_id != discussion_group_id:
        logger.info(f"Ignored message for counting from chat_id {current_chat_id}, not the expected discussion group {discussion_group_id}")
        return

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤ (—É–ª—É—á—à–µ–Ω–æ)
    message_type = "unknown"
    if message.text:
        message_type = "text"
    elif message.photo:
        message_type = "photo"
    elif message.sticker:
        message_type = "sticker"
    elif message.video:
        message_type = "video"
    elif message.document:
        message_type = "document"
    elif message.audio:
        message_type = "audio"
    elif message.voice:
        message_type = "voice"
    elif message.video_note:
        message_type = "video_note"
    elif message.new_chat_members: # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è
